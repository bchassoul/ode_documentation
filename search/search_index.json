{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Numerical Methods for ODEs This documentation provides an overview of numerical methods for solving ordinary differential equations (ODEs) using Python. The methods covered include the Euler method, second-order Runge-Kutta (RK2), and fourth-order Runge-Kutta (RK4). ODE Module Euler Method Second-order Runge-Kutta (RK2) Fourth-order Runge-Kutta (RK4)","title":"Home"},{"location":"#numerical-methods-for-odes","text":"This documentation provides an overview of numerical methods for solving ordinary differential equations (ODEs) using Python. The methods covered include the Euler method, second-order Runge-Kutta (RK2), and fourth-order Runge-Kutta (RK4).","title":"Numerical Methods for ODEs"},{"location":"#ode-module","text":"Euler Method Second-order Runge-Kutta (RK2) Fourth-order Runge-Kutta (RK4)","title":"ODE Module"},{"location":"ode/","text":"ODE Module This section contains the documentation for the functions in the ode module. Euler The Euler method is a first-order numerical procedure for solving ODEs. It is the simplest Runge-Kutta method. def euler ( f , y0 , t ): \"\"\"Euler method for solving ODEs. Args: f (function): Function that returns the derivative of y at t. y0 (float): Initial value. t (list of floats): Time points. Returns: list of floats: Approximated solution at each time point. \"\"\" y = [ y0 ] for i in range ( 1 , len ( t )): dt = t [ i ] - t [ i - 1 ] y . append ( y [ i - 1 ] + dt * f ( y [ i - 1 ], t [ i - 1 ])) return y Second-order Runge-Kutta (RK2) The RK2 method is a second-order method, providing better accuracy than the Euler method. def rk2 ( f , y0 , t ): \"\"\"Second-order Runge-Kutta method for solving ODEs. Args: f (function): Function that returns the derivative of y at t. y0 (float): Initial value. t (list of floats): Time points. Returns: list of floats: Approximated solution at each time point. \"\"\" y = [ y0 ] for i in range ( 1 , len ( t )): dt = t [ i ] - t [ i - 1 ] k1 = f ( y [ i - 1 ], t [ i - 1 ]) k2 = f ( y [ i - 1 ] + dt * k1 , t [ i - 1 ] + dt ) y . append ( y [ i - 1 ] + dt * ( k1 + k2 ) / 2 ) return y Fourth-order Runge-Kutta (RK4) The RK4 method is one of the most widely used methods for solving ODEs due to its balance between simplicity and accuracy. def rk4 ( f , y0 , t ): \"\"\"Fourth-order Runge-Kutta method for solving ODEs. Args: f (function): Function that returns the derivative of y at t. y0 (float): Initial value. t (list of floats): Time points. Returns: list of floats: Approximated solution at each time point. \"\"\" y = [ y0 ] for i in range ( 1 , len ( t )): dt = t [ i ] - t [ i - 1 ] k1 = f ( y [ i - 1 ], t [ i - 1 ]) k2 = f ( y [ i - 1 ] + dt * k1 / 2 , t [ i - 1 ] + dt / 2 ) k3 = f ( y [ i - 1 ] + dt * k2 / 2 , t [ i - 1 ] + dt / 2 ) k4 = f ( y [ i - 1 ] + dt * k3 , t [ i - 1 ] + dt ) y . append ( y [ i - 1 ] + dt * ( k1 + 2 * k2 + 2 * k3 + k4 ) / 6 ) return y","title":"ODE Module"},{"location":"ode/#ode-module","text":"This section contains the documentation for the functions in the ode module.","title":"ODE Module"},{"location":"ode/#euler","text":"The Euler method is a first-order numerical procedure for solving ODEs. It is the simplest Runge-Kutta method. def euler ( f , y0 , t ): \"\"\"Euler method for solving ODEs. Args: f (function): Function that returns the derivative of y at t. y0 (float): Initial value. t (list of floats): Time points. Returns: list of floats: Approximated solution at each time point. \"\"\" y = [ y0 ] for i in range ( 1 , len ( t )): dt = t [ i ] - t [ i - 1 ] y . append ( y [ i - 1 ] + dt * f ( y [ i - 1 ], t [ i - 1 ])) return y","title":"Euler"},{"location":"ode/#second-order-runge-kutta-rk2","text":"The RK2 method is a second-order method, providing better accuracy than the Euler method. def rk2 ( f , y0 , t ): \"\"\"Second-order Runge-Kutta method for solving ODEs. Args: f (function): Function that returns the derivative of y at t. y0 (float): Initial value. t (list of floats): Time points. Returns: list of floats: Approximated solution at each time point. \"\"\" y = [ y0 ] for i in range ( 1 , len ( t )): dt = t [ i ] - t [ i - 1 ] k1 = f ( y [ i - 1 ], t [ i - 1 ]) k2 = f ( y [ i - 1 ] + dt * k1 , t [ i - 1 ] + dt ) y . append ( y [ i - 1 ] + dt * ( k1 + k2 ) / 2 ) return y","title":"Second-order Runge-Kutta (RK2)"},{"location":"ode/#fourth-order-runge-kutta-rk4","text":"The RK4 method is one of the most widely used methods for solving ODEs due to its balance between simplicity and accuracy. def rk4 ( f , y0 , t ): \"\"\"Fourth-order Runge-Kutta method for solving ODEs. Args: f (function): Function that returns the derivative of y at t. y0 (float): Initial value. t (list of floats): Time points. Returns: list of floats: Approximated solution at each time point. \"\"\" y = [ y0 ] for i in range ( 1 , len ( t )): dt = t [ i ] - t [ i - 1 ] k1 = f ( y [ i - 1 ], t [ i - 1 ]) k2 = f ( y [ i - 1 ] + dt * k1 / 2 , t [ i - 1 ] + dt / 2 ) k3 = f ( y [ i - 1 ] + dt * k2 / 2 , t [ i - 1 ] + dt / 2 ) k4 = f ( y [ i - 1 ] + dt * k3 , t [ i - 1 ] + dt ) y . append ( y [ i - 1 ] + dt * ( k1 + 2 * k2 + 2 * k3 + k4 ) / 6 ) return y","title":"Fourth-order Runge-Kutta (RK4)"}]}